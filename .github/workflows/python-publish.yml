name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build tools
        run: python -m pip install --upgrade build

      - name: Clean old builds
        run: rm -rf dist build

      - name: Check version matches release tag   # üëà nova checagem
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "GitHub release tag version: $TAG_VERSION"

          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "pyproject.toml version: $PYPROJECT_VERSION"

          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "‚ùå Vers√£o no pyproject.toml ($PYPROJECT_VERSION) n√£o bate com a release ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Vers√£o conferida: $PYPROJECT_VERSION"

      - name: Build package
        run: python -m build

      - name: Show generated files
        run: ls -lh dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
